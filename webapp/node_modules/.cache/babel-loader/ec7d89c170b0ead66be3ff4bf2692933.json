{"ast":null,"code":"'use strict';\n\nconst Aspect = require('./operation').Aspect;\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst handleCallback = require('../utils').handleCallback;\n\nconst CursorState = require('../core/cursor').CursorState;\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst push = Array.prototype.push;\n\nclass ToArrayOperation extends OperationBase {\n  constructor(cursor) {\n    super();\n    this.cursor = cursor;\n  }\n\n  execute(callback) {\n    const cursor = this.cursor;\n    const items = []; // Reset cursor\n\n    cursor.rewind();\n    cursor.s.state = CursorState.INIT; // Fetch all the documents\n\n    const fetchDocs = () => {\n      cursor._next((err, doc) => {\n        if (err) {\n          return cursor._endSession ? cursor._endSession(() => handleCallback(callback, err)) : handleCallback(callback, err);\n        }\n\n        if (doc == null) {\n          return cursor.close({\n            skipKillCursors: true\n          }, () => handleCallback(callback, null, items));\n        } // Add doc to items\n\n\n        items.push(doc); // Get all buffered objects\n\n        if (cursor.bufferedCount() > 0) {\n          let docs = cursor.readBufferedDocuments(cursor.bufferedCount()); // Transform the doc if transform method added\n\n          if (cursor.s.transforms && typeof cursor.s.transforms.doc === 'function') {\n            docs = docs.map(cursor.s.transforms.doc);\n          }\n\n          push.apply(items, docs);\n        } // Attempt a fetch\n\n\n        fetchDocs();\n      });\n    };\n\n    fetchDocs();\n  }\n\n}\n\ndefineAspects(ToArrayOperation, Aspect.SKIP_SESSION);\nmodule.exports = ToArrayOperation;","map":null,"metadata":{},"sourceType":"script"}