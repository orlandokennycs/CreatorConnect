{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\n\nconst ServerDescription = require('./server_description').ServerDescription;\n\nconst ServerType = require('./common').ServerType;\n\nconst TopologyDescription = require('./topology_description').TopologyDescription;\n\nconst TopologyType = require('./common').TopologyType;\n\nconst monitoring = require('./monitoring');\n\nconst Server = require('./server').Server;\n\nconst relayEvents = require('../utils').relayEvents;\n\nconst ReadPreference = require('../topologies/read_preference');\n\nconst isRetryableWritesSupported = require('../topologies/shared').isRetryableWritesSupported;\n\nconst CoreCursor = require('../cursor').CoreCursor;\n\nconst deprecate = require('util').deprecate;\n\nconst BSON = require('../connection/utils').retrieveBSON();\n\nconst createCompressionInfo = require('../topologies/shared').createCompressionInfo;\n\nconst isRetryableError = require('../error').isRetryableError;\n\nconst isSDAMUnrecoverableError = require('../error').isSDAMUnrecoverableError;\n\nconst ClientSession = require('../sessions').ClientSession;\n\nconst createClientInfo = require('../topologies/shared').createClientInfo;\n\nconst MongoError = require('../error').MongoError;\n\nconst resolveClusterTime = require('../topologies/shared').resolveClusterTime;\n\nconst SrvPoller = require('./srv_polling').SrvPoller;\n\nconst getMMAPError = require('../topologies/shared').getMMAPError;\n\nconst makeStateMachine = require('../utils').makeStateMachine;\n\nconst eachAsync = require('../utils').eachAsync;\n\nconst emitDeprecationWarning = require('../../utils').emitDeprecationWarning;\n\nconst common = require('./common');\n\nconst drainTimerQueue = common.drainTimerQueue;\nconst clearAndRemoveTimerFrom = common.clearAndRemoveTimerFrom;\n\nconst serverSelection = require('./server_selection');\n\nconst readPreferenceServerSelector = serverSelection.readPreferenceServerSelector;\nconst writableServerSelector = serverSelection.writableServerSelector;\nconst selectServers = serverSelection.selectServers; // Global state\n\nlet globalTopologyCounter = 0; // events that we relay to the `Topology`\n\nconst SERVER_RELAY_EVENTS = ['serverHeartbeatStarted', 'serverHeartbeatSucceeded', 'serverHeartbeatFailed', 'commandStarted', 'commandSucceeded', 'commandFailed', // NOTE: Legacy events\n'monitoring']; // all events we listen to from `Server` instances\n\nconst LOCAL_SERVER_EVENTS = SERVER_RELAY_EVENTS.concat(['error', 'connect', 'descriptionReceived', 'close', 'ended']);\nconst STATE_CLOSING = common.STATE_CLOSING;\nconst STATE_CLOSED = common.STATE_CLOSED;\nconst STATE_CONNECTING = common.STATE_CONNECTING;\nconst STATE_CONNECTED = common.STATE_CONNECTED;\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\nconst DEPRECATED_OPTIONS = new Set(['autoReconnect', 'reconnectTries', 'reconnectInterval', 'bufferMaxEntries']);\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n *\n * @fires Topology#serverOpening\n * @fires Topology#serverClosed\n * @fires Topology#serverDescriptionChanged\n * @fires Topology#topologyOpening\n * @fires Topology#topologyClosed\n * @fires Topology#topologyDescriptionChanged\n * @fires Topology#serverHeartbeatStarted\n * @fires Topology#serverHeartbeatSucceeded\n * @fires Topology#serverHeartbeatFailed\n */\n\nclass Topology extends EventEmitter {\n  /**\n   * Create a topology\n   *\n   * @param {Array|String} [seedlist] a string list, or array of Server instances to connect to\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.localThresholdMS=15] The size of the latency window for selecting among multiple suitable servers\n   * @param {Number} [options.serverSelectionTimeoutMS=30000] How long to block for server selection before throwing an error\n   * @param {Number} [options.heartbeatFrequencyMS=10000] The frequency with which topology updates are scheduled\n   */\n  constructor(seedlist, options) {\n    super();\n\n    if (typeof options === 'undefined' && typeof seedlist !== 'string') {\n      options = seedlist;\n      seedlist = []; // this is for legacy single server constructor support\n\n      if (options.host) {\n        seedlist.push({\n          host: options.host,\n          port: options.port\n        });\n      }\n    }\n\n    seedlist = seedlist || [];\n\n    if (typeof seedlist === 'string') {\n      seedlist = parseStringSeedlist(seedlist);\n    }\n\n    options = Object.assign({}, common.TOPOLOGY_DEFAULTS, options);\n    DEPRECATED_OPTIONS.forEach(optionName => {\n      if (options[optionName]) {\n        emitDeprecationWarning(\"The option `\".concat(optionName, \"` is incompatible with the unified topology, please read more by visiting http://bit.ly/2D8WfT6\"), 'DeprecationWarning');\n      }\n    });\n    const topologyType = topologyTypeFromSeedlist(seedlist, options);\n    const topologyId = globalTopologyCounter++;\n    const serverDescriptions = seedlist.reduce((result, seed) => {\n      if (seed.domain_socket) seed.host = seed.domain_socket;\n      const address = seed.port ? \"\".concat(seed.host, \":\").concat(seed.port) : \"\".concat(seed.host, \":27017\");\n      result.set(address, new ServerDescription(address));\n      return result;\n    }, new Map());\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist: seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(topologyType, serverDescriptions, options.replicaSet, null, null, null, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // allow users to override the cursor factory\n      Cursor: options.cursorFactory || CoreCursor,\n      // the bson parser\n      bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: null,\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise,\n      credentials: options.credentials,\n      clusterTime: null,\n      // timer management\n      iterationTimers: new Set(),\n      connectionTimers: new Set()\n    }; // amend options for server instance creation\n\n    this.s.options.compression = {\n      compressors: createCompressionInfo(options)\n    }; // add client info\n\n    this.s.clientInfo = createClientInfo(options);\n\n    if (options.srvHost) {\n      this.s.srvPoller = options.srvPoller || new SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost,\n        // TODO: GET THIS\n        logger: options.logger,\n        loggerLevel: options.loggerLevel\n      });\n\n      this.s.detectTopologyDescriptionChange = ev => {\n        const previousType = ev.previousDescription.type;\n        const newType = ev.newDescription.type;\n\n        if (previousType !== TopologyType.Sharded && newType === TopologyType.Sharded) {\n          this.s.handleSrvPolling = srvPollingHandler(this);\n          this.s.srvPoller.on('srvRecordDiscovery', this.s.handleSrvPolling);\n          this.s.srvPoller.start();\n        }\n      };\n\n      this.on('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n    } // NOTE: remove this when NODE-1709 is resolved\n\n\n    this.setMaxListeners(Infinity);\n  }\n  /**\n   * @return A `TopologyDescription` for this topology\n   */\n\n\n  get description() {\n    return this.s.description;\n  }\n\n  get parserType() {\n    return BSON.native ? 'c++' : 'js';\n  }\n  /**\n   * All raw connections\n   * @method\n   * @return {Connection[]}\n   */\n\n\n  connections() {\n    return Array.from(this.s.servers.values()).reduce((result, server) => {\n      return result.concat(server.s.pool.allConnections());\n    }, []);\n  }\n  /**\n   * Initiate server connect\n   *\n   * @param {Object} [options] Optional settings\n   * @param {Array} [options.auth=null] Array of auth options to apply on connect\n   * @param {function} [callback] An optional callback called once on the first connected server\n   */\n\n\n  connect(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options || {};\n\n    if (this.s.state === STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING); // emit SDAM monitoring events\n\n    this.emit('topologyOpening', new monitoring.TopologyOpeningEvent(this.s.id)); // emit an event for the topology change\n\n    this.emit('topologyDescriptionChanged', new monitoring.TopologyDescriptionChangedEvent(this.s.id, new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n    this.s.description)); // connect all known servers, then attempt server selection to connect\n\n    connectServers(this, Array.from(this.s.description.servers.values()));\n    translateReadPreference(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        stateTransition(this, STATE_CLOSED);\n\n        if (typeof callback === 'function') {\n          callback(err, null);\n        } else {\n          this.emit('error', err);\n        }\n\n        return;\n      }\n\n      const errorHandler = err => {\n        stateTransition(this, STATE_CLOSED);\n        server.removeListener('connect', connectHandler);\n        if (typeof callback === 'function') callback(err, null);\n      };\n\n      const connectHandler = (_, err) => {\n        stateTransition(this, STATE_CONNECTED);\n        server.removeListener('error', errorHandler);\n        this.emit('open', err, this);\n        this.emit('connect', this);\n        if (typeof callback === 'function') callback(err, this);\n      };\n\n      const STATE_CONNECTING = 1;\n\n      if (server.s.state === STATE_CONNECTING) {\n        server.once('error', errorHandler);\n        server.once('connect', connectHandler);\n        return;\n      }\n\n      connectHandler();\n    });\n  }\n  /**\n   * Close this topology\n   */\n\n\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = {\n        force: options\n      };\n    }\n\n    options = options || {};\n\n    if (this.s.state === STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    } // clear all existing monitor timers\n\n\n    drainTimerQueue(this.s.iterationTimers);\n    drainTimerQueue(this.s.connectionTimers);\n\n    if (this.s.sessionPool) {\n      this.s.sessions.forEach(session => session.endSession());\n      this.s.sessionPool.endAllPooledSessions();\n    }\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n\n      if (this.s.handleSrvPolling) {\n        this.s.srvPoller.removeListener('srvRecordDiscovery', this.s.handleSrvPolling);\n        delete this.s.handleSrvPolling;\n      }\n    }\n\n    if (this.s.detectTopologyDescriptionChange) {\n      this.removeListener('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n      delete this.s.detectTopologyDescriptionChange;\n    } // defer state transition because we may need to send an `endSessions` command above\n\n\n    stateTransition(this, STATE_CLOSING);\n    eachAsync(Array.from(this.s.servers.values()), (server, cb) => destroyServer(server, this, options, cb), () => {\n      this.s.servers.clear(); // emit an event for close\n\n      this.emit('topologyClosed', new monitoring.TopologyClosedEvent(this.s.id));\n      stateTransition(this, STATE_CLOSED);\n      this.emit('close');\n\n      if (typeof callback === 'function') {\n        callback();\n      }\n    });\n  }\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param {function} [selector] An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param {object} [options] Optional settings related to server selection\n   * @param {number} [options.serverSelectionTimeoutMS] How long to block for server selection before throwing an error\n   * @param {function} callback The callback used to indicate success or failure\n   * @return {Server} An instance of a `Server` meeting the criteria of the predicate provided\n   */\n\n\n  selectServer(selector, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n\n      if (typeof selector !== 'function') {\n        options = selector;\n        let readPreference;\n\n        if (selector instanceof ReadPreference) {\n          readPreference = selector;\n        } else {\n          translateReadPreference(options);\n          readPreference = options.readPreference || ReadPreference.primary;\n        }\n\n        selector = readPreferenceServerSelector(readPreference);\n      } else {\n        options = {};\n      }\n    }\n\n    options = Object.assign({}, {\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n    }, options);\n    const isSharded = this.description.type === TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(null, transaction.server);\n      return;\n    }\n\n    selectServers(this, selector, options.serverSelectionTimeoutMS, process.hrtime(), (err, servers) => {\n      if (err) return callback(err);\n      const selectedServer = randomSelection(servers);\n\n      if (isSharded && transaction && transaction.isActive) {\n        transaction.pinServer(selectedServer);\n      }\n\n      callback(null, selectedServer);\n    });\n  } // Sessions related methods\n\n  /**\n   * @return Whether the topology should initiate selection to determine session support\n   */\n\n\n  shouldCheckForSessionSupport() {\n    if (this.description.type === TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n  /**\n   * @return Whether sessions are supported on the current topology\n   */\n\n\n  hasSessionSupport() {\n    return this.description.logicalSessionTimeoutMinutes != null;\n  }\n  /**\n   * Start a logical session\n   */\n\n\n  startSession(options, clientOptions) {\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n    this.s.sessions.add(session);\n    return session;\n  }\n  /**\n   * Send endSessions command(s) with the given session ids\n   *\n   * @param {Array} sessions The sessions to end\n   * @param {function} [callback]\n   */\n\n\n  endSessions(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    this.command('admin.$cmd', {\n      endSessions: sessions\n    }, {\n      readPreference: ReadPreference.primaryPreferred,\n      noResponse: true\n    }, () => {\n      // intentionally ignored, per spec\n      if (typeof callback === 'function') callback();\n    });\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param {object} serverDescription The server to update in the internal list of server descriptions\n   */\n\n\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    } // these will be used for monitoring events later\n\n\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address); // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n\n    const clusterTime = serverDescription.$clusterTime;\n\n    if (clusterTime) {\n      resolveClusterTime(this, clusterTime);\n    } // If we already know all the information contained in this updated description, then\n    // we don't need to update anything or emit SDAM events\n\n\n    if (previousServerDescription && previousServerDescription.equals(serverDescription)) {\n      return;\n    } // first update the TopologyDescription\n\n\n    this.s.description = this.s.description.update(serverDescription);\n\n    if (this.s.description.compatibilityError) {\n      this.emit('error', new MongoError(this.s.description.compatibilityError));\n      return;\n    } // emit monitoring events for this change\n\n\n    this.emit('serverDescriptionChanged', new monitoring.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, this.s.description.servers.get(serverDescription.address))); // update server list from updated descriptions\n\n    updateServers(this, serverDescription);\n    this.emit('topologyDescriptionChanged', new monitoring.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n  }\n\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = null;\n    if (typeof callback === 'function') callback(null, true);\n  }\n\n  logout(callback) {\n    if (typeof callback === 'function') callback(null, true);\n  } // Basic operation support. Eventually this should be moved into command construction\n  // during the command refactor.\n\n  /**\n   * Insert one or more documents\n   *\n   * @param {String} ns The full qualified namespace for this operation\n   * @param {Array} ops An array of documents to insert\n   * @param {Boolean} [options.ordered=true] Execute in order or out of order\n   * @param {Object} [options.writeConcern] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n\n\n  insert(ns, ops, options, callback) {\n    executeWriteOperation({\n      topology: this,\n      op: 'insert',\n      ns,\n      ops\n    }, options, callback);\n  }\n  /**\n   * Perform one or more update operations\n   *\n   * @param {string} ns The fully qualified namespace for this operation\n   * @param {array} ops An array of updates\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n\n\n  update(ns, ops, options, callback) {\n    executeWriteOperation({\n      topology: this,\n      op: 'update',\n      ns,\n      ops\n    }, options, callback);\n  }\n  /**\n   * Perform one or more remove operations\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of removes\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n\n\n  remove(ns, ops, options, callback) {\n    executeWriteOperation({\n      topology: this,\n      op: 'remove',\n      ns,\n      ops\n    }, options, callback);\n  }\n  /**\n   * Execute a command\n   *\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cmd The command hash\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Connection} [options.connection] Specify connection object to execute command against\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n\n\n  command(ns, cmd, options, callback) {\n    if (typeof options === 'function') {\n      callback = options, options = {}, options = options || {};\n    }\n\n    translateReadPreference(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const willRetryWrite = !options.retrying && !!options.retryWrites && options.session && isRetryableWritesSupported(this) && !options.session.inTransaction() && isWriteCommand(cmd);\n\n      const cb = (err, result) => {\n        if (!err) return callback(null, result);\n\n        if (!isRetryableError(err)) {\n          return callback(err);\n        }\n\n        if (willRetryWrite) {\n          const newOptions = Object.assign({}, options, {\n            retrying: true\n          });\n          return this.command(ns, cmd, newOptions, callback);\n        }\n\n        return callback(err);\n      }; // increment and assign txnNumber\n\n\n      if (willRetryWrite) {\n        options.session.incrementTransactionNumber();\n        options.willRetryWrite = willRetryWrite;\n      }\n\n      server.command(ns, cmd, options, cb);\n    });\n  }\n  /**\n   * Create a new cursor\n   *\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n   * @param {object} [options] Options for the cursor\n   * @param {object} [options.batchSize=0] Batchsize for the operation\n   * @param {array} [options.documents=[]] Initial documents list for cursor\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {object} [options.topology] The internal topology of the created cursor\n   * @returns {Cursor}\n   */\n\n\n  cursor(ns, cmd, options) {\n    options = options || {};\n    const topology = options.topology || this;\n    const CursorClass = options.cursorFactory || this.s.Cursor;\n    translateReadPreference(options);\n    return new CursorClass(topology, ns, cmd, options);\n  }\n\n  get clientInfo() {\n    return this.s.clientInfo;\n  }\n\n  isConnected() {\n    return this.s.state === STATE_CONNECTED;\n  }\n\n  isDestroyed() {\n    return this.s.state === STATE_CLOSED;\n  }\n\n  unref() {\n    console.log('not implemented: `unref`');\n  } // NOTE: There are many places in code where we explicitly check the last isMaster\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first isMaster seen, which should suffice.\n\n\n  lastIsMaster() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get bson() {\n    return this.s.bson;\n  }\n\n}\n\nObject.defineProperty(Topology.prototype, 'clusterTime', {\n  enumerable: true,\n  get: function () {\n    return this.s.clusterTime;\n  },\n  set: function (clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n}); // legacy aliases\n\nTopology.prototype.destroy = deprecate(Topology.prototype.close, 'destroy() is deprecated, please use close() instead');\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\n\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n/**\n * Destroys a server, and removes all event listeners from the instance\n *\n * @param {Server} server\n */\n\n\nfunction destroyServer(server, topology, options, callback) {\n  options = options || {};\n  LOCAL_SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n  server.destroy(options, () => {\n    topology.emit('serverClosed', new monitoring.ServerClosedEvent(topology.s.id, server.description.address));\n    if (typeof callback === 'function') callback(null, null);\n  });\n}\n/**\n * Parses a basic seedlist in string form\n *\n * @param {string} seedlist The seedlist to parse\n */\n\n\nfunction parseStringSeedlist(seedlist) {\n  return seedlist.split(',').map(seed => ({\n    host: seed.split(':')[0],\n    port: seed.split(':')[1] || 27017\n  }));\n}\n\nfunction topologyTypeFromSeedlist(seedlist, options) {\n  const replicaSet = options.replicaSet || options.setName || options.rs_name;\n  if (seedlist.length === 1 && !replicaSet) return TopologyType.Single;\n  if (replicaSet) return TopologyType.ReplicaSetNoPrimary;\n  return TopologyType.Unknown;\n}\n\nfunction randomSelection(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction createAndConnectServer(topology, serverDescription, connectDelay) {\n  topology.emit('serverOpening', new monitoring.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new Server(serverDescription, topology.s.options, topology);\n  relayEvents(server, topology, SERVER_RELAY_EVENTS);\n  server.once('connect', serverConnectEventHandler(server, topology));\n  server.on('descriptionReceived', topology.serverUpdateHandler.bind(topology));\n  server.on('error', serverErrorEventHandler(server, topology));\n\n  if (connectDelay) {\n    const connectTimer = setTimeout(() => {\n      clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);\n      server.connect();\n    }, connectDelay);\n    topology.s.connectionTimers.add(connectTimer);\n    return server;\n  }\n\n  server.connect();\n  return server;\n}\n\nfunction resetServer(topology, serverDescription) {\n  if (!topology.s.servers.has(serverDescription.address)) {\n    return;\n  } // first remove the old server\n\n\n  const server = topology.s.servers.get(serverDescription.address);\n  destroyServer(server, topology); // add the new server, and attempt connection after a delay\n\n  const newServer = createAndConnectServer(topology, serverDescription, topology.s.minHeartbeatFrequencyMS);\n  topology.s.servers.set(serverDescription.address, newServer);\n}\n/**\n * Create `Server` instances for all initially known servers, connect them, and assign\n * them to the passed in `Topology`.\n *\n * @param {Topology} topology The topology responsible for the servers\n * @param {ServerDescription[]} serverDescriptions A list of server descriptions to connect\n */\n\n\nfunction connectServers(topology, serverDescriptions) {\n  topology.s.servers = serverDescriptions.reduce((servers, serverDescription) => {\n    const server = createAndConnectServer(topology, serverDescription);\n    servers.set(serverDescription.address, server);\n    return servers;\n  }, new Map());\n}\n\nfunction updateServers(topology, incomingServerDescription) {\n  // if the server was reset internally because of an error, we need to replace the\n  // `Server` instance for it so we can attempt reconnect.\n  //\n  // TODO: this logical can change once CMAP is put in place\n  if (incomingServerDescription && incomingServerDescription.error) {\n    resetServer(topology, incomingServerDescription);\n    return;\n  } // update the internal server's description\n\n\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    server.s.description = incomingServerDescription;\n  } // add new servers for all descriptions we currently don't know about locally\n\n\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  } // for all servers no longer known, remove their descriptions and destroy their instances\n\n\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress); // prepare server for garbage collection\n\n    destroyServer(server, topology);\n  }\n}\n\nfunction serverConnectEventHandler(server, topology) {\n  return function ()\n  /* isMaster, err */\n  {\n    server.monitor({\n      initial: true,\n      heartbeatFrequencyMS: topology.description.heartbeatFrequencyMS\n    });\n  };\n}\n\nfunction serverErrorEventHandler(server, topology) {\n  return function (err) {\n    if (topology.s.state === STATE_CLOSING || topology.s.state === STATE_CLOSED) {\n      return;\n    }\n\n    if (isSDAMUnrecoverableError(err, server)) {\n      // NOTE: this must be commented out until we switch to the new CMAP pool because\n      //       we presently _always_ clear the pool on error.\n      resetServerState(server, err\n      /*, { clearPool: true } */\n      );\n      return;\n    }\n\n    resetServerState(server, err);\n  };\n}\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {}; // TODO: once we drop Node 4, use destructuring either here or in arguments.\n\n  const topology = args.topology;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n  const willRetryWrite = !args.retrying && !!options.retryWrites && options.session && isRetryableWritesSupported(topology) && !options.session.inTransaction();\n  topology.selectServer(writableServerSelector(), options, (err, server) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    const handler = (err, result) => {\n      if (!err) return callback(null, result);\n\n      if (!isRetryableError(err)) {\n        err = getMMAPError(err);\n        return callback(err);\n      }\n\n      if (willRetryWrite) {\n        const newArgs = Object.assign({}, args, {\n          retrying: true\n        });\n        return executeWriteOperation(newArgs, options, callback);\n      }\n\n      return callback(err);\n    };\n\n    if (callback.operationId) {\n      handler.operationId = callback.operationId;\n    } // increment and assign txnNumber\n\n\n    if (willRetryWrite) {\n      options.session.incrementTransactionNumber();\n      options.willRetryWrite = willRetryWrite;\n    } // execute the write operation\n\n\n    server[op](ns, ops, options, handler);\n  });\n}\n/**\n * Resets the internal state of this server to `Unknown` by simulating an empty ismaster\n *\n * @private\n * @param {Server} server\n * @param {MongoError} error The error that caused the state reset\n * @param {object} [options] Optional settings\n * @param {boolean} [options.clearPool=false] Pool should be cleared out on state reset\n */\n\n\nfunction resetServerState(server, error, options) {\n  options = Object.assign({}, {\n    clearPool: false\n  }, options);\n\n  function resetState() {\n    server.emit('descriptionReceived', new ServerDescription(server.description.address, null, {\n      error\n    }));\n    process.nextTick(() => server.monitor());\n  }\n\n  if (options.clearPool && server.s.pool) {\n    server.s.pool.reset(() => resetState());\n    return;\n  }\n\n  resetState();\n}\n\nfunction translateReadPreference(options) {\n  if (options.readPreference == null) {\n    return;\n  }\n\n  let r = options.readPreference;\n\n  if (typeof r === 'string') {\n    options.readPreference = new ReadPreference(r);\n  } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n    const mode = r.mode || r.preference;\n\n    if (mode && typeof mode === 'string') {\n      options.readPreference = new ReadPreference(mode, r.tags, {\n        maxStalenessSeconds: r.maxStalenessSeconds\n      });\n    }\n  } else if (!(r instanceof ReadPreference)) {\n    throw new TypeError('Invalid read preference: ' + r);\n  }\n\n  return options;\n}\n\nfunction srvPollingHandler(topology) {\n  return function handleSrvPolling(ev) {\n    const previousTopologyDescription = topology.s.description;\n    topology.s.description = topology.s.description.updateFromSrvPollingEvent(ev);\n\n    if (topology.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(topology);\n    topology.emit('topologyDescriptionChanged', new monitoring.TopologyDescriptionChangedEvent(topology.s.id, previousTopologyDescription, topology.s.description));\n  };\n}\n/**\n * A server opening SDAM monitoring event\n *\n * @event Topology#serverOpening\n * @type {ServerOpeningEvent}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Topology#serverClosed\n * @type {ServerClosedEvent}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Topology#serverDescriptionChanged\n * @type {ServerDescriptionChangedEvent}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Topology#topologyOpening\n * @type {TopologyOpeningEvent}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Topology#topologyClosed\n * @type {TopologyClosedEvent}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Topology#topologyDescriptionChanged\n * @type {TopologyDescriptionChangedEvent}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Topology#serverHeartbeatStarted\n * @type {ServerHeartbeatStartedEvent}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Topology#serverHeartbeatFailed\n * @type {ServerHearbeatFailedEvent}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Topology#serverHeartbeatSucceeded\n * @type {ServerHeartbeatSucceededEvent}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Topology#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Topology#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Topology#commandFailed\n * @type {object}\n */\n\n\nmodule.exports = {\n  Topology\n};","map":null,"metadata":{},"sourceType":"script"}