{"ast":null,"code":"'use strict';\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\n\nconst retrieveKerberos = require('../utils').retrieveKerberos;\n\nlet kerberos;\n/**\n * Creates a new SSPI authentication mechanism\n * @class\n * @extends AuthProvider\n */\n\nclass SSPI extends AuthProvider {\n  /**\n   * Implementation of authentication for a single connection\n   * @override\n   */\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n    // TODO: Destructure this\n    const username = credentials.username;\n    const password = credentials.password;\n    const mechanismProperties = credentials.mechanismProperties;\n    const gssapiServiceName = mechanismProperties['gssapiservicename'] || mechanismProperties['gssapiServiceName'] || 'mongodb';\n    SSIPAuthenticate(this, kerberos.processes.MongoAuthProcess, username, password, gssapiServiceName, sendAuthCommand, connection, mechanismProperties, callback);\n  }\n  /**\n   * Authenticate\n   * @override\n   * @method\n   */\n\n\n  auth(sendAuthCommand, connections, credentials, callback) {\n    if (kerberos == null) {\n      try {\n        kerberos = retrieveKerberos();\n      } catch (e) {\n        return callback(e, null);\n      }\n    }\n\n    super.auth(sendAuthCommand, connections, credentials, callback);\n  }\n\n}\n\nfunction SSIPAuthenticate(self, MongoAuthProcess, username, password, gssapiServiceName, sendAuthCommand, connection, options, callback) {\n  const authProcess = new MongoAuthProcess(connection.host, connection.port, gssapiServiceName, options);\n\n  function authCommand(command, authCb) {\n    sendAuthCommand(connection, '$external.$cmd', command, authCb);\n  }\n\n  authProcess.init(username, password, err => {\n    if (err) return callback(err, false);\n    authProcess.transition('', (err, payload) => {\n      if (err) return callback(err, false);\n      const command = {\n        saslStart: 1,\n        mechanism: 'GSSAPI',\n        payload,\n        autoAuthorize: 1\n      };\n      authCommand(command, (err, doc) => {\n        if (err) return callback(err, false);\n        authProcess.transition(doc.payload, (err, payload) => {\n          if (err) return callback(err, false);\n          const command = {\n            saslContinue: 1,\n            conversationId: doc.conversationId,\n            payload\n          };\n          authCommand(command, (err, doc) => {\n            if (err) return callback(err, false);\n            authProcess.transition(doc.payload, (err, payload) => {\n              if (err) return callback(err, false);\n              const command = {\n                saslContinue: 1,\n                conversationId: doc.conversationId,\n                payload\n              };\n              authCommand(command, (err, response) => {\n                if (err) return callback(err, false);\n                authProcess.transition(null, err => {\n                  if (err) return callback(err, null);\n                  callback(null, response);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\nmodule.exports = SSPI;","map":null,"metadata":{},"sourceType":"script"}