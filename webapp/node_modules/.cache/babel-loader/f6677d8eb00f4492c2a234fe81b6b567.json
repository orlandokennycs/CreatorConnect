{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\n/**\n * Creates a new MongoCR authentication mechanism\n *\n * @extends AuthProvider\n */\n\n\nclass MongoCR extends AuthProvider {\n  /**\n   * Implementation of authentication for a single connection\n   * @override\n   */\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n    const username = credentials.username;\n    const password = credentials.password;\n    const source = credentials.source;\n    sendAuthCommand(connection, \"\".concat(source, \".$cmd\"), {\n      getnonce: 1\n    }, (err, r) => {\n      let nonce = null;\n      let key = null; // Get nonce\n\n      if (err == null) {\n        nonce = r.nonce; // Use node md5 generator\n\n        let md5 = crypto.createHash('md5'); // Generate keys used for authentication\n\n        md5.update(username + ':mongo:' + password, 'utf8');\n        const hash_password = md5.digest('hex'); // Final key\n\n        md5 = crypto.createHash('md5');\n        md5.update(nonce + username + hash_password, 'utf8');\n        key = md5.digest('hex');\n      }\n\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n      sendAuthCommand(connection, \"\".concat(source, \".$cmd\"), authenticateCommand, callback);\n    });\n  }\n\n}\n\nmodule.exports = MongoCR;","map":null,"metadata":{},"sourceType":"script"}