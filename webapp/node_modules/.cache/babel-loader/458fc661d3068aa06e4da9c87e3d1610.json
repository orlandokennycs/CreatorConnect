{"ast":null,"code":"'use strict';\n\nconst Aspect = require('./operation').Aspect;\n\nconst CommandOperation = require('./command');\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst handleCallback = require('../utils').handleCallback;\n\nconst MongoError = require('../core').MongoError;\n\nconst parseIndexOptions = require('../utils').parseIndexOptions;\n\nconst keysToOmit = new Set(['name', 'key', 'writeConcern', 'w', 'wtimeout', 'j', 'fsync', 'readPreference', 'session']);\n\nclass CreateIndexOperation extends CommandOperation {\n  constructor(db, name, fieldOrSpec, options) {\n    super(db, options); // Build the index\n\n    const indexParameters = parseIndexOptions(fieldOrSpec); // Generate the index name\n\n    const indexName = typeof options.name === 'string' ? options.name : indexParameters.name; // Set up the index\n\n    const indexesObject = {\n      name: indexName,\n      key: indexParameters.fieldHash\n    };\n    this.name = name;\n    this.fieldOrSpec = fieldOrSpec;\n    this.indexes = indexesObject;\n  }\n\n  _buildCommand() {\n    const options = this.options;\n    const name = this.name;\n    const indexes = this.indexes; // merge all the options\n\n    for (let optionName in options) {\n      if (!keysToOmit.has(optionName)) {\n        indexes[optionName] = options[optionName];\n      }\n    } // Create command, apply write concern to command\n\n\n    const cmd = {\n      createIndexes: name,\n      indexes: [indexes]\n    };\n    return cmd;\n  }\n\n  execute(callback) {\n    const db = this.db;\n    const options = this.options;\n    const indexes = this.indexes; // Get capabilities\n\n    const capabilities = db.s.topology.capabilities(); // Did the user pass in a collation, check if our write server supports it\n\n    if (options.collation && capabilities && !capabilities.commandsTakeCollation) {\n      // Create a new error\n      const error = new MongoError('server/primary/mongos does not support collation');\n      error.code = 67; // Return the error\n\n      return callback(error);\n    } // Ensure we have a callback\n\n\n    if (options.writeConcern && typeof callback !== 'function') {\n      throw MongoError.create({\n        message: 'Cannot use a writeConcern without a provided callback',\n        driver: true\n      });\n    } // Attempt to run using createIndexes command\n\n\n    super.execute((err, result) => {\n      if (err == null) return handleCallback(callback, err, indexes.name);\n      return handleCallback(callback, err, result);\n    });\n  }\n\n}\n\ndefineAspects(CreateIndexOperation, Aspect.WRITE_OPERATION);\nmodule.exports = CreateIndexOperation;","map":null,"metadata":{},"sourceType":"script"}