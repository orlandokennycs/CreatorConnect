{"ast":null,"code":"'use strict';\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\n\nconst retrieveKerberos = require('../utils').retrieveKerberos;\n\nlet kerberos;\n/**\n * Creates a new GSSAPI authentication mechanism\n * @class\n * @extends AuthProvider\n */\n\nclass GSSAPI extends AuthProvider {\n  /**\n   * Implementation of authentication for a single connection\n   * @override\n   */\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n    const source = credentials.source;\n    const username = credentials.username;\n    const password = credentials.password;\n    const mechanismProperties = credentials.mechanismProperties;\n    const gssapiServiceName = mechanismProperties['gssapiservicename'] || mechanismProperties['gssapiServiceName'] || 'mongodb';\n    GSSAPIInitialize(this, kerberos.processes.MongoAuthProcess, source, username, password, source, gssapiServiceName, sendAuthCommand, connection, mechanismProperties, callback);\n  }\n  /**\n   * Authenticate\n   * @override\n   * @method\n   */\n\n\n  auth(sendAuthCommand, connections, credentials, callback) {\n    if (kerberos == null) {\n      try {\n        kerberos = retrieveKerberos();\n      } catch (e) {\n        return callback(e, null);\n      }\n    }\n\n    super.auth(sendAuthCommand, connections, credentials, callback);\n  }\n\n} //\n// Initialize step\n\n\nvar GSSAPIInitialize = function (self, MongoAuthProcess, db, username, password, authdb, gssapiServiceName, sendAuthCommand, connection, options, callback) {\n  // Create authenticator\n  var mongo_auth_process = new MongoAuthProcess(connection.host, connection.port, gssapiServiceName, options); // Perform initialization\n\n  mongo_auth_process.init(username, password, function (err) {\n    if (err) return callback(err, false); // Perform the first step\n\n    mongo_auth_process.transition('', function (err, payload) {\n      if (err) return callback(err, false); // Call the next db step\n\n      MongoDBGSSAPIFirstStep(self, mongo_auth_process, payload, db, username, password, authdb, sendAuthCommand, connection, callback);\n    });\n  });\n}; //\n// Perform first step against mongodb\n\n\nvar MongoDBGSSAPIFirstStep = function (self, mongo_auth_process, payload, db, username, password, authdb, sendAuthCommand, connection, callback) {\n  // Build the sasl start command\n  var command = {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload: payload,\n    autoAuthorize: 1\n  }; // Write the commmand on the connection\n\n  sendAuthCommand(connection, '$external.$cmd', command, (err, doc) => {\n    if (err) return callback(err, false); // Execute mongodb transition\n\n    mongo_auth_process.transition(doc.payload, function (err, payload) {\n      if (err) return callback(err, false); // MongoDB API Second Step\n\n      MongoDBGSSAPISecondStep(self, mongo_auth_process, payload, doc, db, username, password, authdb, sendAuthCommand, connection, callback);\n    });\n  });\n}; //\n// Perform first step against mongodb\n\n\nvar MongoDBGSSAPISecondStep = function (self, mongo_auth_process, payload, doc, db, username, password, authdb, sendAuthCommand, connection, callback) {\n  // Build Authentication command to send to MongoDB\n  var command = {\n    saslContinue: 1,\n    conversationId: doc.conversationId,\n    payload: payload\n  }; // Execute the command\n  // Write the commmand on the connection\n\n  sendAuthCommand(connection, '$external.$cmd', command, (err, doc) => {\n    if (err) return callback(err, false); // Call next transition for kerberos\n\n    mongo_auth_process.transition(doc.payload, function (err, payload) {\n      if (err) return callback(err, false); // Call the last and third step\n\n      MongoDBGSSAPIThirdStep(self, mongo_auth_process, payload, doc, db, username, password, authdb, sendAuthCommand, connection, callback);\n    });\n  });\n};\n\nvar MongoDBGSSAPIThirdStep = function (self, mongo_auth_process, payload, doc, db, username, password, authdb, sendAuthCommand, connection, callback) {\n  // Build final command\n  var command = {\n    saslContinue: 1,\n    conversationId: doc.conversationId,\n    payload: payload\n  }; // Execute the command\n\n  sendAuthCommand(connection, '$external.$cmd', command, (err, r) => {\n    if (err) return callback(err, false);\n    mongo_auth_process.transition(null, function (err) {\n      if (err) return callback(err, null);\n      callback(null, r);\n    });\n  });\n};\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\n\nmodule.exports = GSSAPI;","map":null,"metadata":{},"sourceType":"script"}